How to start the spring boot ? and how to create spring boot projects ?
their are 4 ways to create spring boot projects

1) create a maven project and add the starter dependencies
2)using spring initializr( it is basically a website spring.io where u can initialize)(download and then add to or project) 
3) use IDE like STS ( this is the ide which give plugin for spring)
4) Spring boot command line interface
    recommended (2,3)


** by using the spring initializr 
 
 group denotes the package name
 artifact denotes the application name 
 what is the difference between jar and war?
 JAR files allows to us package multiple files and WAR files and are only used 
for web applications


Q. what is inside springbootprojectApplication.java?
A. then is run and inside run our application is started springbootprojectApp
   we also have the annotation i.e.
  @SpringBootApplication  = @Configuration & @EnableAutoConfiguration & @ComponentScan
so springbootapplication is these three following annotations, so spring boot min the annnotations
means this springbootapplication can do all the things like config , enableautoconfig, and will scan all the
components


Q. Steps to import the maven project created by the initaliser
1) unzip the maven project make sure it contain pom.xml file 
2) now open ecllipse , now go to the file then select import
3) now search for maven and then select exisiting maven project 
4) then select the folder where u have the project, set location and make sure the pom.xml 
   file is checked 
5) now finish the project and make sure , network is connected 

-----------------------------------------------------------------------------------------------------------------------------------

******************** SPRING BOOT STARTER  ************************
problem solve: what is the problem and why spring application is really hard!! and harder 
   question is which maven dependencies i need to use ?

so better solution is that we create collection as a group of dependencies 
so i don't have to search for each dependency


SOLITIONS: is by making the spring boot starters 
        1) a curated list of maven dependencies 
        2) a collections of dependencies grouped together 
        3) tested and verified by the spring development team
        4) makes it much easier for the developer to get started with spring
        5) reduces the ammount of maven config

 Q. what was the difference between now and earlier ?
                                             *******
 for spring MVC we have to write so much            *
 <!-- spring support -->                            *
   <dependency>                                     *
       <groupId> fgrgka </groupId>                  *
       <artifactId> spring-webapp</artifactId>      *
       <version> 6.0.0.RC1 </version>               *    
   </dependency>                                    *
                                                    *
<!-- hibrenate validator -->                        *    ( all of this we need to do 
                                                            with spring mvc)       
<dependency>                                        *
   <groupId> ojafjwbtibni </groupId>                *
   <artifactId>jarqjrtgntg</artifactId>             *
   <version> rqrggnto </version>                    *
</dependency>                                       *
                                                    *
<!-- web template thymeleof -->                     *
<dependency>                                        *
     <groupId> fgrgka </groupId>                    *
       <artifactId> thymleaf</artifactId>           *
       <version> 6.0.0.RC1 </version>               *
</dependency>                                       *
                                        * * * * * * *


so spring boot provides spring-boot-starter-web
which is the spring boot starter depenecies

// this save a developer for putting the list of all the individual dependencies 
<dependency>
  <groupId> org.springframework.boot </groupId>
  <artifactId>spring-boot-starter-web</artifactId>   (spring boot starters a collection of maven 
                                                             dependencies 
</dependency>                             (contains spring web,spring webmvc, hibernate-validator,json tomcat ...)

//** we can give these depenecies while creating the spring intializer , so we want to make the spring app that have the
    web security then we can select the dependencies in the spring initializr , and it will directly add that to your pom.xml 
    files


** so there is 30 + spring boot starter from the spring development team
  https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using.build-systems.starters
  by this u will get the list all the 30 starters

// by this way u can explore the starters
 open pom.xml -> select tab for dependency hierarchy at the bottom -> expand the desired starter  

---------------------------------------------------------------------------------------------------------------------------------------------------------------
  ******************** SPRING BOOT STARTER PARENT  ************************
  spring boot provides a "starter parent" so this is the special parent which provides the
   maven defaults


##Maven standard directory structure
    directory             description
  src/main/java         your java source code
  src/main/resources    properties/ config files used by your app
  src/test/java          unit testing source code

## Maven wrapper files (mvnw and mvnw.cmd)
.mvnw allows u to run maven project
.no need to have a maven installed or present on your path
.if correct version of maven is not found on your computer
.automatically download correct version of maven

Two files are provided
.mvnw.cmd for MS Windows  >mvnv clean compiler test 

**** if u have mvn already installed then their is no need of the mvn and mvn.cmd file  ****


## Maven POM files
   pom.xml includes info that you entered at spring initializr website
    this has the information about the artifact id and groupid, so on

## templates
    spring boot includes auto-config for following template engines
     .freeMarker , .thymeleaf (popular template enginer we will use later in this course ).mustache

## unit test
   we have class mycoolapplicationTests.java created by intialiser, u can add your basic 
   custom test to this file

what the component of just created maven project?
1) resources folder( where u can keep your resources)
   static - where u can keep the static files, templates - where we can keep the templates
   
appliaction.properties - here u can mention , if u want to change the port , configure path 
               

2)mvnw.cmd & mvnw - this the utility for using the command line rather
                   so if u are using ecllipse as ide u can delete it 

3) porm.xml - main project is prom.xml
4) static : static content from the static directory example, html files,css ,javascript


******* UNDERSTANDING MORE ABOUT APPLICATION.PROPERTIES *********
properties file not always means u always have to config in it u can put the data in 
form of key and value pair in it.
and spring boot use these properties to configure.

(so this is prebuild)
PRECONFIGURED     ---------by  application .properties ------->our customize application
  APPLICATION 
(as u made the application u                                        ( and for basically doing this 
    get a preconfigured application)                                config u have to give key value pair)
    get a preconfigured application)                                                                    

list of the properties u can change
1) core properties           6) transaction properties
2) cache properties          7)data migration properties
3) mail properties           8)integration properties
4)json properties          and many more properties u can
5) data properties             configure while configuration u can see the list
                              on spring boot website


right click on your screen and run the project 

## for changing the port u can go on application.port ---- and write this (server.port =9192)

**NOTE: and keep in mind u have to do all your work in your package , mean right 
click on the package name at the right panel  **


******************LET'S MAKE CONTROLLER ON THE SPRING BOOT ******************
1) first we will make the class by going on the package ,Let's say with the
    name TestController
2) now add the annotation @Controller along with the package associate with the 
   annotation 
3) now add handler and name it as firsthandler() and return type will be string 
   and we will name it as first handler 

  for eg:
    public String firstHandler()
    {  return " Just for testing !!"; }

4) and now we will do the mapping of this  using the notation @RequestMapping("/test")
    and import the package associated with this annotaion.

5) and then we will use the response annotation to run the above string on our web 
  page

    http://localhost:9192/test   // now by writing this u can run your program 

** here u can do jsp configue or any other configue *


doubts ?
1) what is actually controller?
2) what do we make the package name using .rest after pervious package name ?
3)what is handler ? and why do created function for it?
4)now we will do mapping using the annotations, and what is the mapping ?
5) what is the response annotation and why it is used for running the string on the page?
6) why it run on  http://localhost:9192/test why /test ?
 7) make me understand a warning do not use the src/main/webapp directory if your application is packaged as a JAR
    although this is a standard maven directory , it works only with WAR packaging 
    it is silently ignored by most build tools if you generate a Jar files

//

*********************   Learning about STS  *******************************
STS  is the ide that supports spring boot . it has addition plugins.











               






 
    
